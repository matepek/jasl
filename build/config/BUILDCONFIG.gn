if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  target_cpu = host_cpu
}

if (current_cpu == "") {
  current_cpu = target_cpu
}
if (current_os == "") {
  current_os = target_os
}

declare_args() {
  if (host_os == "mac") {
    # Set this to override the platform-specific default value.
    compiler_type = "clang"
  } else if (host_os == "linux") {
    # Set this to override the platform-specific default value.
    compiler_type = "gcc"
  } else if (host_os == "win") {
    # Set this to override the platform-specific default value.
    compiler_type = "msvc"
  } else {
    assert(false)
  }

  # Debug build.
  is_debug = false

  # Compile for Address Sanitizer to find memory bugs.
  is_asan = false

  # Compile for Leak Sanitizer to find leaks.
  is_lsan = false

  # Compile for Memory Sanitizer to find uninitialized reads.
  is_msan = false

  # Compile for Undefined Behavior Sanitizer to find bugs.
  is_usan = false

  # Build will run tests.
  is_run_tests = true

  # Build will generate perforormance report.
  #   Don't use this. The generated reports would be useless, because it measures during the buildig process when the resources under a heavy use.
  is_run_performance_tests = false

  # Build will generate coverage report.
  is_generate_test_coverage = false

  # Tests will be built and run with std::string_view too.
  #   Only works, if the compiler version and the std_version is proper. (C++17 or later)
  is_std_string_view_supported = false
}

declare_args() {
  if (host_os == "win") {
    # Windows only.
    #   We are looking for the "vcvarsall.bat" file.
    #   It really depends on the VS version.
    visual_studio_path = "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat"

    # C++ version. :std=<std_version> for compiler.
    std_version = "c++latest"
  } else {
    if (compiler_type == "clang") {
      # Unix only.
      #   Other versions can be set with this.
      #   Analoge to make's CXX.
      compiler_exec = "clang++"
    } else if (compiler_type == "gcc") {
      # Unix only.
      #   Other versions can be set with this.
      #   Analoge to make's CXX.
      compiler_exec = "g++"
    } else {
      assert(false)
    }

    # C++ version. -std=<std_version> for compiler.
    std_version = "c++17"
  }
}

declare_args() {
  is_defined_JASL_ASSERT_ON = false
  is_defined_JASL_TERMINATE_ON_EXCEPTION_ON = false
  is_defined_JASL_FORCE_USE_MURMURHASH_HASH = false
  is_defined_JASL_USE_JASL_STRING_VIEW_AS_BASE = false
  is_defined_JASL_USE_STD_STRING_VIEW_AS_BASE = false
  is_defined_JASL_SUPPORT_STD_TO_JASL = false
  is_defined_JASL_SUPPORT_JASL_TO_STD = false
}

is_clang = compiler_type == "clang"
is_gcc = compiler_type == "gcc"
is_msvc = compiler_type == "msvc"
assert(is_clang || is_gcc || is_msvc)

if (is_asan || is_lsan || is_msan || is_usan) {
  assert(is_clang, "These features requires clang!")
}
assert(!is_lsan || is_asan, "lsan => asan!")
assert(!(is_asan && is_msan), "Exclsive flags!")

if (is_generate_test_coverage) {
  assert(is_clang || is_gcc, "This features requires clang!")
  assert(is_debug)
  assert(is_run_tests)
}

assert(!is_defined_JASL_USE_STD_STRING_VIEW_AS_BASE || is_std_string_view_supported)

set_default_toolchain("//build/toolchain/$target_os:$target_cpu$compiler_type")

set_defaults("source_set") {
  configs = [ "//build/config:default" ]
}

set_defaults("static_library") {
  configs = [ "//build/config:default" ]
}

set_defaults("shared_library") {
  configs = [ "//build/config:default" ]
}

set_defaults("executable") {
  configs = [ "//build/config:default" ]
}

import("//build/test.gni")
import("//build/performance.gni")
