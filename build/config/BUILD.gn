config("default") {
  cflags = []
  configs = []
  defines = []

  if (is_defined_JASL_ASSERT_ON) {
    defines += [ "JASL_ASSERT_ON" ]
  }
  if (is_defined_JASL_TERMINATE_ON_EXCEPTION_ON) {
    defines += [ "JASL_TERMINATE_ON_EXCEPTION_ON" ]
  }
  if (is_defined_JASL_FORCE_USE_MURMURHASH_HASH) {
    defines += [ "JASL_FORCE_USE_MURMURHASH_HASH" ]
  }
  
  configs += [ ":compiler_$compiler_type" ]

  if (is_debug) {
    configs += [
      ":debug",
      ":no_optimization",
    ]
  } else {
    configs += [ ":optimization" ]
  }
}

config("compiler_clang") {
  common_flags = [ "-std=" + std_version ]

  if (host_cpu == "x64" && current_cpu == "x86") {
    common_flags += [ "-m32" ]
  } else if (host_cpu == "x86" && current_cpu == "x64") {
    common_flags += [ "-m64" ]
  } else {
    assert(host_cpu == current_cpu)
  }

  cflags = common_flags + [
             "-fcolor-diagnostics",
             "-ferror-limit=100",
             "-Wall",
             "-Werror",
             "-Weverything",
             "-Wno-c++98-compat",
             "-Wno-c++98-compat-pedantic",
             "-Wno-missing-prototypes",
             "-Wno-padded",
           ]
  ldflags = common_flags + []

  #https://github.com/google/sanitizers

  #https://clang.llvm.org/docs/AddressSanitizer.html
  #https://clang.llvm.org/docs/LeakSanitizer.html
  if (is_asan) {
    common_flags_asan = [ "-fsanitize=address" ]
    cflags += common_flags_asan + [ "-fno-omit-frame-pointer" ]
    ldflags += common_flags_asan
  }

  #https://clang.llvm.org/docs/MemorySanitizer.html
  if (is_msan) {
    assert(is_debug)  #less than -O1
    common_flags_msan = [
      "-fno-optimize-sibling-calls",
      "-fno-omit-frame-pointer",
      "-fsanitize=memory",
      "-fsanitize-memory-track-origins=1",
      "-fsanitize-memory-use-after-dtor",  #experimental
    ]
    cflags += common_flags_msan
    ldflags += common_flags_msan
  }

  #https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
  if (is_usan) {
    common_flags_usan = [
      "-fsanitize=undefined",
      "-fsanitize=integer",
      "-fsanitize=nullability",
      "-g",
      "-fno-omit-frame-pointer",
    ]
    cflags += common_flags_usan
    ldflags += common_flags_usan
  }
  if (is_generate_test_coverage) {
    cflags += [
      "-fprofile-instr-generate",
      "-fcoverage-mapping",
    ]
    ldflags += [ "-fprofile-instr-generate" ]
  }
}

config("compiler_gcc") {
  common_flags = [
    "-std=" + std_version,
    "-Wall",
    "-Werror",
    "-Wextra",
    "-Wpedantic",
  ]

  if (host_cpu == "x64" && current_cpu == "x86") {
    common_flags += [ "-m32" ]
  } else if (host_cpu == "x86" && current_cpu == "x64") {
    common_flags += [ "-m64" ]
  } else {
    assert(host_cpu == current_cpu)
  }

  if (is_generate_test_coverage) {
    # https://gcc.gnu.org/onlinedocs/gcc/Gcov-and-Optimization.html#Gcov-and-Optimization
    # https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html#Invoking-Gcov
    common_flags += [
      "-fprofile-arcs",
      "-ftest-coverage",
      "-lgcov",
    ]
  }

  cflags = common_flags + []
  ldflags = common_flags + []
}

config("compiler_msvc") {
  common_flags = []
  cflags = common_flags + [
             "/std:" + std_version,
             "/TP",  # https://msdn.microsoft.com/en-us/library/032xwy55.aspx
             "/EHsc",
           ]
  ldflags = common_flags
}

config("debug") {
  defines = [ "JASL_DEBUG" ]
  if (compiler_type == "clang" || compiler_type == "gcc") {
    cflags = [ "-g" ]
    ldflags = [ "-g" ]
  } else if (compiler_type == "msvc") {
    cflags = [ "/Zi" ]
    ldflags = [ "/DEBUG" ]
  }
}

# https://msdn.microsoft.com/en-us/library/k1ack8f1.aspx

config("optimization") {
  if (compiler_type == "clang" || compiler_type == "gcc") {
    cflags = [ "-O3" ]
  } else if (compiler_type == "msvc") {
    #cflags = [ "/Ox" ]
  }
}

config("no_optimization") {
  if (compiler_type == "clang" || compiler_type == "gcc") {
    cflags = [ "-O0" ]
  } else {
    cflags = [ "/Od" ]
  }
}
