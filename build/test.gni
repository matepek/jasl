template("test") {
  forward_variables_from(invoker, "*")

  test_name = invoker.target_name + ".test"

  if (is_generate_test_coverage) {
    profraw_name = invoker.target_name + ".profraw"
  }

  executable(test_name) {
    sources = [
      invoker.target_name + ".test.cpp",
    ]

    public_deps = [
      "//:include",
    ]
  }

  if (is_run_tests) {
    tested_name = invoker.target_name + ".tested"

    action(tested_name) {
      script = "//build/call.py"

      args = []

      if (is_asan) {
        asan_options = "ASAN_OPTIONS=allow_addr2line=1"
        if (is_lsan) {
          asan_options += ",detect_leaks=1"
        }
        args += [
          "-e",
          asan_options,
        ]
      }

      if (is_msan) {
        args += [
          "-e",
          "MSAN_OPTIONS=allow_addr2line=1",
        ]
      }

      if (is_usan) {
        args += [
          "-e",
          "UBSAN_OPTIONS=print_stacktrace=1",
        ]
      }

      if (is_generate_test_coverage) {
        args += [
          "-e",
          "LLVM_PROFILE_FILE=" + profraw_name,
        ]
      }

      args += [
        "-c",
        "./$test_name",
        "-o",
        target_name,
      ]

      outputs = [
        "$root_out_dir/$target_name",
      ]
      if (is_generate_test_coverage) {
        outputs += [ "$root_out_dir/$profraw_name" ]
      }

      deps = [
        ":$test_name",
      ]
    }

    if (is_generate_test_coverage) {
      if (is_clang) {
        profdata_name = invoker.target_name + ".profdata"
        html_name = invoker.target_name + ".coverage"

        if (host_os == "mac") {
          llvm_profdata_platfrom_dependent_args_prefix = [
            "-c",
            "xcrun",
            "--",
            "llvm-profdata",
          ]
          llvm_cov_platform_dependent_args_prefix = [
            "-c",
            "xcrun",
            "--",
            "llvm-cov",
          ]
        } else {
          llvm_profdata_platfrom_dependent_args_prefix = [
            "-c",
            "llvm-profdata",
            "--",
          ]
          llvm_cov_platform_dependent_args_prefix = [
            "-c",
            "llvm-cov",
            "--",
          ]
        }

        action(profdata_name) {
          script = "//build/call.py"

          args = llvm_profdata_platfrom_dependent_args_prefix + [
                   "merge",
                   "-sparse",
                   "$profraw_name",
                   "-o",
                   target_name,
                 ]
          outputs = [
            "$root_out_dir/$target_name",
          ]
          deps = [
            ":$tested_name",
          ]
        }

        action(html_name) {
          script = "//build/call.py"

          args = llvm_cov_platform_dependent_args_prefix + [
                   "show",
                   "-format=html",
                   "-instr-profile",
                   profdata_name,
                   test_name,
                   "-o",
                   target_name,
                 ]

          outputs = [
            "$root_out_dir/$target_name",
          ]
          deps = [
            ":$profdata_name",
            ":$test_name",
          ]
        }
      } else if (is_gcc) {
        # we could generate a more readable output here.
        # maybe later. now works for coverall.io.
      } else {
        assert(false)
      }
    }
  }
}

template("test_build_err") {
  forward_variables_from(invoker, "*")

  source_name = invoker.target_name + ".test_build_err.cpp.c"
  tested_name = invoker.target_name + ".tested"

  source_set(tested_name) {
    sources = [
      source_name,
    ]

    public_deps = [
      "//:include",
    ]

    common_flags = [
      "jasl-error-regex=" + error_regex,
    ]
    if (is_clang) {
      common_flags += [
        "-Wno-deprecated",
      ]
    }
    cflags = common_flags
    ldflags = common_flags
  }
}