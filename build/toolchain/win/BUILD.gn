if (is_msvc) {
  template("msvc_toolchain") {
    forward_variables_from(invoker, "*")

    toolchain(target_name) {
      assert(host_os == target_os)
      if (host_cpu == "x64" && target_cpu == "x86") {
        arch = "amd64_x86"
      } else if (host_cpu == "x86" && target_cpu == "x64") {
        arch = "x86_amd64"
      } else if (host_cpu == "x64") {
        assert(host_cpu == target_cpu)
        arch = "amd64"
      } else if (host_cpu == "x86") {
        assert(host_cpu == target_cpu)
        arch = "x86"
      } else {
        assert(false)
      }

      # https://docs.microsoft.com/hu-hu/cpp/build/building-on-the-command-line
      tool("stamp") {
        tool_wrapper_path =
            rebase_path("//build/toolchain/win/tool_wrapper.py", root_build_dir)
        command = "python $tool_wrapper_path stamp {{output}}"
        description = "STAMP {{output}}"
      }

      msvc = exec_script("setup_msvc_toolchain.py",
                         [
                           "--arch",
                           arch,
                           "--vs-path",
                           visual_studio_path,
                         ],
                         "scope")
      env = msvc.env_filename
      link = msvc.tool_dir + "/link.exe"
      cl = msvc.tool_dir + "/cl.exe"

      tool("link") {
        exename = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
        pdbname = "$exename.pdb"
        rspfile = "$exename.rsp"
        pool = ":concurent_link_pool"

        command = "ninja -t msvc -e \"$env\" -- \"$link\" /nologo /OUT:$exename /PDB:$pdbname @$rspfile"

        default_output_extension = ".exe"
        default_output_dir = "{{root_out_dir}}"
        description = "LINK {{output}}"
        outputs = [
          exename,
        ]

        # The use of inputs_newline is to work around a fixed per-line buffer
        # size in the linker.
        rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{ldflags}}"
      }

      tool("cc") {
        # Object files go in this directory.
        output_subdir = "{{target_out_dir}}/{{label_name}}"
        precompiled_header_type = "msvc"

        # The PDB name needs to be different between C and C++ compiled files.
        pdbname = "{{target_out_dir}}/{{label_name}}_cc.pdb"

        # See comment in CC tool about quoting.
        depsformat = "msvc"
        description = "COMPILE_AND_EXPECT_ERROR {{output}}"
        outputs = [
          "$output_subdir/{{source_name_part}}.obj",
        ]

        command = "python ..\\..\\build\\comp_err.py -t \"{{output}}\" -- ninja -t msvc -e \"$env\" -- \"$cl\" /nologo /showIncludes {{defines}} {{include_dirs}} {{cflags}} /Fo\"{{output}}.out\" /Fd\"$pdbname\" /c \"{{source}}\""
      }

      tool("cxx") {
        # Object files go in this directory.
        output_subdir = "{{target_out_dir}}/{{label_name}}"
        precompiled_header_type = "msvc"

        # The PDB name needs to be different between C and C++ compiled files.
        pdbname = "{{target_out_dir}}/{{label_name}}_cc.pdb"

        # See comment in CC tool about quoting.
        depsformat = "msvc"
        description = "CXX {{output}}"
        outputs = [
          "$output_subdir/{{source_name_part}}.obj",
        ]
        rspfile = "{{output}}.rsp"
        rspfile_content = "{{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}}"

        command = "ninja -t msvc -e \"$env\" -- \"$cl\" /nologo /showIncludes @\"$rspfile\" /Fo\"{{output}}\" /Fd\"$pdbname\" /c \"{{source}}\""
      }
    }
  }

  pool("concurent_link_pool") {
    depth = 1
  }

  msvc_toolchain("x64msvc") {
  }

  msvc_toolchain("x86msvc") {
  }
}

if (is_clang) {
  import("//build/toolchain/clang_gcc_toolchain.gni")

  clang_gcc_toolchain("x64clang") {
    #tool_prefix = "xcrun -sdk " + sdk_name + sdk_version + " "
    #cxx = tool_prefix + "c++"
    current_compiler_exec = compiler_exec
  }
}