template("clang_gcc_toolchain") {
  forward_variables_from(invoker, [ "current_compiler_exec" ])

  toolchain(target_name) {
    output_subdir = "{{target_out_dir}}/{{label_name}}"

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("link") {
      outfile = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
      rspfile = "$outfile.rsp"
      rspfile_content = "{{inputs}} {{solibs}} {{libs}}"
      command = "$current_compiler_exec {{ldflags}} -o \"$outfile\" @\"$rspfile\""
      description = "LINK $outfile"
      outputs = [
        outfile,
      ]
    }

    tool("cxx") {
      precompiled_header_type = "gcc"
      depfile = "{{output}}.d"
      command = "$current_compiler_exec -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CXX {{output}}"
      outputs = [
        "$output_subdir/{{source_name_part}}.o",
      ]
    }

    # It is a hack to test compile errors. The project has no C file.
    tool("cc") {
      command = "($current_compiler_exec {{defines}} {{include_dirs}} {{cflags}} -c {{source}} -o {{output}}" + " > /dev/null 2>&1); if test \$? -eq 0;" + "then rm {{output}}; echo Error: Compilation error was expected, but not occured: {{source}}!;" + "else touch {{output}}; fi;"
      description = "COMPILE_AND_EXPECT_ERROR {{output}}"
      outputs = [
        "$output_subdir/{{source_name_part}}.err_ok",
      ]
    }
  }
}

clang_gcc_toolchain("x64gcc") {
  current_compiler_exec = compiler_exec
}

clang_gcc_toolchain("x64clang") {
  current_compiler_exec = compiler_exec
}
